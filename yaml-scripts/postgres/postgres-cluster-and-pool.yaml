apiVersion: v1
kind: Namespace
metadata:
  name: postgres-system
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: postgres-system
type: Opaque
data:
  postgres-password: cGFzc3dvcmQ=  # base64 encoded 'password'
  replication-password: cmVwbGljYXRvcg==  # base64 encoded 'replicator'
  pgpool-admin-password: cGFzc3dvcmQ=  # base64 for 'password'
  pgpool-sr-check-password: cGFzc3dvcmQ=  # base64 for 'password'
  pgpool-health-check-password: cGFzc3dvcmQ=  # base64 for 'password'
  pgpool-postgres-password: cGFzc3dvcmQ=  # base64 encoded 'password'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-scripts
  namespace: postgres-system
data:
  init.sh: |
    #!/bin/bash
    set -e

    POD_INDEX=$(echo $HOSTNAME | grep -o '[0-9]\+$')
    DATA_DIR="/var/lib/postgresql/data/pgdata"

    if [ "$POD_INDEX" -eq 0 ]; then
      if [ ! -d "$DATA_DIR" ]; then
        echo "Initializing master database..."
        initdb -D "$DATA_DIR"
      else
        echo "Master data directory already exists."
      fi
    else
      echo "Setting up replica..."
      # Wait for the master to be ready
      until pg_isready -h postgres-0.postgres.postgres-system.svc.cluster.local -U replicator; do
        echo "Waiting for master to be ready..."
        sleep 5
      done
      # Run pg_basebackup to replicate data from master
      pg_basebackup -h postgres-0.postgres.postgres-system.svc.cluster.local -U replicator -D "$DATA_DIR" -P --wal-method=stream
      # Create standby.signal to indicate replica mode
      touch "$DATA_DIR/standby.signal"
    fi
  start.sh: |
    #!/bin/bash
    POD_INDEX=$(echo $HOSTNAME | grep -o '[0-9]\+$')
    if [ "$POD_INDEX" -eq 0 ]; then
      echo "Starting master..."
      exec postgres -c listen_addresses='*' -c wal_level=replica -c max_wal_senders=10 -c max_replication_slots=10
    else
      echo "Starting replica..."
      exec postgres -c listen_addresses='*' -c hot_standby=on
    fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-initdb-script
  namespace: postgres-system
data:
  initdb.sh: |
    #!/bin/bash
    set -e
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<EOF
    CREATE USER replicator WITH REPLICATION ENCRYPTED PASSWORD '$REPLICATION_PASSWORD';
    EOF
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: postgres-system
spec:
  serviceName: postgres
  replicas: 2
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        runAsUser: 999  # Run as 'postgres' user (UID 999)
        runAsGroup: 999 # Optional: Set the group ID
      initContainers:
        - name: init-replica
          image: postgres:13
          command: ["/bin/bash", "/scripts/init.sh"]
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            - name: data
              mountPath: /var/lib/postgresql/data
      containers:
        - name: postgres
          image: postgres:13
          command: ["/bin/bash", "/scripts/start.sh"]
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-password
            - name: REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: replication-password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: scripts
              mountPath: /scripts
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: scripts
          configMap:
            name: postgres-scripts
            defaultMode: 0755
        - name: initdb
          configMap:
            name: postgres-initdb-script
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: nfs-client-retain
        resources:
          requests:
            storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: postgres-system
spec:
  clusterIP: None
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgpool
  namespace: postgres-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pgpool
  template:
    metadata:
      labels:
        app: pgpool
    spec:
      containers:
      - name: pgpool
        image: bitnami/pgpool:latest
        ports:
        - containerPort: 9999
        resources:
          limits:
            cpu: "0.5"
            memory: "512Mi"
          requests:
            cpu: "0.2"
            memory: "256Mi"
        env:
        - name: PGPOOL_ADMIN_USERNAME
          value: "admin"
        - name: PGPOOL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: pgpool-admin-password
        - name: PGPOOL_SR_CHECK_USER
          value: "replicator"
        - name: PGPOOL_SR_CHECK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: pgpool-sr-check-password
        - name: PGPOOL_HEALTH_CHECK_USER
          value: "healthcheck"
        - name: PGPOOL_HEALTH_CHECK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: pgpool-health-check-password
        - name: PGPOOL_POSTGRES_USERNAME
          value: "postgres"
        - name: PGPOOL_POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: pgpool-postgres-password
        - name: PGPOOL_BACKEND_NODES
          value: "0:postgres-0.postgres.postgres-system.svc.cluster.local:5432,1:postgres-1.postgres.postgres-system.svc.cluster.local:5432"
---
apiVersion: v1
kind: Service
metadata:
  name: pgpool-service
  namespace: postgres-system
spec:
  type: LoadBalancer
  loadBalancerIP: "192.168.64.108"
  ports:
  - port: 5432
    targetPort: 9999
  selector:
    app: pgpool