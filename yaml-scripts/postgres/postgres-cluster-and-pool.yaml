apiVersion: v1
kind: Namespace
metadata:
  name: postgres-system
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: postgres-system
type: Opaque
data:
  postgres-password: cGFzc3dvcmQ=  # base64 encoded 'password'
  replication-password: cmVwbGljYXRvcg==  # base64 encoded 'replicator'
  pgpool-admin-password: cGFzc3dvcmQ=  # base64 for 'password'
  pgpool-sr-check-password: cGFzc3dvcmQ=  # base64 for 'password'
  pgpool-health-check-password: cGFzc3dvcmQ=  # base64 for 'password'
  pgpool-postgres-password: cGFzc3dvcmQ=  # base64 encoded 'password'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-scripts
  namespace: postgres-system
data:
  init.sh: |
    #!/bin/bash
    set -e

    POD_INDEX=$(echo $HOSTNAME | grep -o '[0-9]\+$')
    DATA_DIR="/var/lib/postgresql/data/pgdata"

    if [ -z "$REPLICATION_PASSWORD" ]; then
      echo "Error: REPLICATION_PASSWORD is not set."
      exit 1
    fi

    if [ "$POD_INDEX" -eq 0 ]; then
      if [ ! -d "$DATA_DIR" ]; then
        echo "Initializing master database..."
        initdb -D "$DATA_DIR"
        # Configure replication settings
        echo "wal_level = replica" >> "$DATA_DIR/postgresql.conf"
        echo "max_wal_senders = 10" >> "$DATA_DIR/postgresql.conf"
        echo "max_replication_slots = 10" >> "$DATA_DIR/postgresql.conf"
        echo "host replication replicator 10.244.0.0/16 trust" >> "$DATA_DIR/pg_hba.conf"
        echo "host all all 10.244.0.0/16 trust" >> "$DATA_DIR/pg_hba.conf"
        # Start PostgreSQL temporarily to create replicator user
        postgres -D "$DATA_DIR" &
        PG_PID=$!
        sleep 5  # Wait for PostgreSQL to start
        psql -v ON_ERROR_STOP=1 -U postgres -d postgres <<EOF
        CREATE USER replicator WITH REPLICATION ENCRYPTED PASSWORD '$REPLICATION_PASSWORD';
        CREATE USER healthcheck WITH PASSWORD 'healthcheck_password';
    EOF
        kill $PG_PID
        wait $PG_PID
      else
        echo "Master data directory already exists."
      fi
    else
      echo "Setting up replica..."
      export PGPASSWORD="$REPLICATION_PASSWORD"
      until pg_isready -h postgres-0.postgres.postgres-system.svc.cluster.local -U replicator; do
        echo "Waiting for master to be ready..."
        sleep 5
      done
      pg_basebackup -h postgres-0.postgres.postgres-system.svc.cluster.local -U replicator -D "$DATA_DIR" -P --wal-method=stream
      echo "host all all 10.244.0.0/16 trust" >> "$DATA_DIR/pg_hba.conf"
      # Configure primary_conninfo for streaming replication
      echo "primary_conninfo = 'host=postgres-0.postgres.postgres-system.svc.cluster.local port=5432 user=replicator password=$REPLICATION_PASSWORD'" >> "$DATA_DIR/postgresql.conf"      
      touch "$DATA_DIR/standby.signal"
    fi
  start.sh: |
    #!/bin/bash
    POD_INDEX=$(echo $HOSTNAME | grep -o '[0-9]\+$')
    if [ "$POD_INDEX" -eq 0 ]; then
      echo "Starting master..."
      exec postgres -c listen_addresses='*'
    else
      echo "Starting replica..."
      exec postgres -c listen_addresses='*' -c hot_standby=on
    fi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: postgres-system
spec:
  serviceName: postgres
  replicas: 3
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
      initContainers:
        - name: init-replica
          image: postgres:13
          command: ["/bin/bash", "/scripts/init.sh"]
          env:
            - name: REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: replication-password          
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            - name: data
              mountPath: /var/lib/postgresql/data
      containers:
        - name: postgres
          image: postgres:13
          command: ["/bin/bash", "/scripts/start.sh"]
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-password
            - name: REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: replication-password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: scripts
              mountPath: /scripts
      volumes:
        - name: scripts
          configMap:
            name: postgres-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: nfs-client-retain
        resources:
          requests:
            storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: postgres-system
spec:
  clusterIP: None
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgpool
  namespace: postgres-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pgpool
  template:
    metadata:
      labels:
        app: pgpool
    spec:
      containers:
      - name: pgpool
        image: bitnami/pgpool:latest
        ports:
        - containerPort: 5432  # Pgpool connection port for PostgreSQL clients
        - containerPort: 9898  # PCP port for Pgpool management
        resources:
          limits:
            cpu: "0.5"
            memory: "512Mi"
          requests:
            cpu: "0.2"
            memory: "256Mi"
        env:
        - name: PGPOOL_ADMIN_USERNAME
          value: "admin"
        - name: PGPOOL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: pgpool-admin-password
        - name: PGPOOL_SR_CHECK_USER
          value: "replicator"
        - name: PGPOOL_SR_CHECK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: pgpool-sr-check-password
        - name: PGPOOL_SR_CHECK_DATABASE
          value: "postgres"
        - name: PGPOOL_HEALTH_CHECK_USER
          value: "healthcheck"
        - name: PGPOOL_HEALTH_CHECK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: pgpool-health-check-password
        - name: PGPOOL_HEALTH_CHECK_DATABASE
          value: "postgres"
        - name: PGPOOL_POSTGRES_USERNAME
          value: "postgres"
        - name: PGPOOL_POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: pgpool-postgres-password
        - name: PGPOOL_BACKEND_NODES
          value: "0:postgres-0.postgres.postgres-system.svc.cluster.local:5432,1:postgres-1.postgres.postgres-system.svc.cluster.local:5432,2:postgres-2.postgres.postgres-system.svc.cluster.local:5432"
---
apiVersion: v1
kind: Service
metadata:
  name: pgpool-service
  namespace: postgres-system
spec:
  type: LoadBalancer
  loadBalancerIP: "192.168.64.108"
  ports:
  - port: 5432          # External port for PostgreSQL clients
    targetPort: 5432    # Matches Pgpool's container port for client connections
    protocol: TCP
    name: pgpool-client
  - port: 9898          # Optional: External port for PCP management
    targetPort: 9898    # Matches Pgpool's container port for PCP
    protocol: TCP
    name: pgpool-pcp
  selector:
    app: pgpool